apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'eclipse'

group = 'my.edu.clhs'
version = '0.0-SNAPSHOT'
mainClassName = 'my.edu.clhs.maths.hadoop.CalculateStatisticsJob'

defaultTasks 'jar'

repositories {
    mavenCentral()
}

dependencies {
    // Libraries needed to run the scala tools
    scalaTools 'org.scala-lang:jline:2.9.1'
    scalaTools 'org.scala-lang:scala-compiler:2.9.1'
    scalaTools 'org.scala-lang:scala-library:2.9.1'
    
    // Libraries needed for scala api
    compile 'org.scala-lang:scala-library:2.9.1'
    
    compile 'org.apache.hadoop:hadoop-core:0.20.2'
    
    runtime 'org.codehaus.jackson:jackson-mapper-asl:1.0.1'
    
    testCompile 'junit:junit:4.+'
    testCompile 'org.scalatest:scalatest_2.9.1:1.6.1'
}

import org.gradle.plugins.ide.eclipse.model.Container
eclipse {
    classpath {
        file {
            beforeMerged { classpath ->
                classpath.entries.removeAll { entry ->
                    entry.kind == 'src' || entry.kind == 'con'
                }
            }
            
            whenMerged { classpath ->
                entries = classpath.entries
                
                // Add Scala library
                container = new Container(
                    'org.scala-ide.sdt.launching.SCALA_CONTAINER')
                i = entries.findLastIndexOf { it.kind == 'con' } + 1
                entries.add(i, container)
                
                // Remove Scala Library JAR (the ScalaIDE doesn't like this)
                entries.removeAll { entry ->
                    entry.kind == 'lib' && entry.path.contains('scala-library')
                }
            }
        }
    }
}

task console(dependsOn: 'classes') << {
    if (gradle.startParameter.logLevel < LogLevel.QUIET) {
        println(
            'Note: The Scala REPL works best in quiet mode ' +
            '(gradle -q console).')
    }
    if (Boolean.getBoolean('org.gradle.daemon')) {
        println('Note: The Scala REPL does not run well in Gradle daemon mode.')
        println('Command completion and history do not work properly.')
    }
    javaexec {
        main = 'scala.tools.nsc.MainGenericRunner'
        standardInput = System.in
        args '-usejavacp'
        bootstrapClasspath System.properties['sun.boot.class.path']
        bootstrapClasspath configurations.scalaTools
        classpath configurations.runtime
        classpath sourceSets.main.output.classesDir
    }
    // Restore terminal
    javaexec {
        main = 'scala.tools.nsc.MainGenericRunner'
        args '-e', 'scala.tools.jline.TerminalFactory.get.restore()'
        bootstrapClasspath System.properties['sun.boot.class.path']
        bootstrapClasspath configurations.scalaTools
    }
}

task wrapper(type: Wrapper)
